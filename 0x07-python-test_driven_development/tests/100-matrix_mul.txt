======================================================
	Test cases for the module 100-matrix_mul
======================================================


Checking documentation:
	>>> docs = __import__('100-matrix_mul').__doc__
	>>> len(docs) > 1
	True

	>>> func_docs = __import__('100-matrix_mul').matrix_mul.__doc__
	>>> len(func_docs) > 1
	True

Importing function:
	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul


Test cases for right types:
	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22]]
	>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])


Test cases for wrong types:
	>>> matrix_mul('hello', [[2, 4]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list

	>>> matrix_mul([[9, 10], [11, 22]], {"matrix": [[2, 4]]})
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list

	>>> matrix_mul([1, 2, 4], [[0, 0]])
	Traceback (most recent call last):
		...
	TypeError: m_a must be a list of lists

	>>> matrix_mul([[1, 1, 1], [1, 1, 1]], ['hello', [3, 5]])
	Traceback (most recent call last):
		...
	TypeError: m_b must be a list of lists


Test cases for empty matrix:
	>>> matrix_mul([], [[1, 0], [0, 1]])
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty

	>>> matrix_mul([[]], [[1, 0], [0, 1]])
	Traceback (most recent call last):
		...
	ValueError: m_a can't be empty

	>>> matrix_mul([[2, 2]], [])
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty

	>>> matrix_mul([[2, 2]], [[]])
	Traceback (most recent call last):
		...
	ValueError: m_b can't be empty

Test cases for wrong sub-types:
	>>> matrix_mul([[2, 'h'], ['h', 2]], [[2, 2], [3, 4]])
	Traceback (most recent call last):
		...
	TypeError: m_a should contain only integers or floats

	>>> matrix_mul([[2, 3], [2, 4]], [['a', 4], [4, 'q']])
	Traceback (most recent call last):
		...
	TypeError: m_b should contain only integers or floats


Test cases for unmatching sizes:
	>>> matrix_mul([[2, 4], [1, 2, 3]], [[1, 2, 4], [1, 3, 4]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_a must be of the same size

	>>> matrix_mul([[1, 2], [3, 4]], [[1, 3, 4, 5], [1, 1]])
	Traceback (most recent call last):
		...
	TypeError: each row of m_b must be of the same size


Test cases for incompatible matrices:
	>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[2, 3, 4], [4, 5, 6]])
	Traceback (most recent call last):
		...
	ValueError: m_a and m_b can't be multiplied
